//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MainBoard/Scripts/Player/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""MainBoard"",
            ""id"": ""ead05179-b5c7-47ac-9216-abbd068680d8"",
            ""actions"": [
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""23d11112-eb60-44d3-84c4-f0d33bbe39ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""e9b3570b-3d77-49ca-a48b-15b4b220b732"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""9a3e17f9-1250-47ff-a7c6-b248666fb882"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""25ede0ad-2a59-479b-a432-8ca9d2ca78f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""I"",
                    ""type"": ""Button"",
                    ""id"": ""0916d9ee-2448-4c2a-88ff-0a1b55f5f91c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""M"",
                    ""type"": ""Button"",
                    ""id"": ""3453763d-1621-4655-b06e-d6a93b2cc93a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""f6367fd0-1a25-4603-9783-dc954e3c7f2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f1f81e7-5ba8-484a-b74c-72f8b39a33da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d147d46-c06a-46f9-bdfc-b86db3fd9649"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""873ff5eb-bd3a-4ce2-ae79-19c59c0df81f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0e8ee2a-6299-4a78-865c-126b1f1087c7"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""093ebe05-b798-4b28-8f0b-026b01327dfa"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""I"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""475f3aed-742b-4569-b8cd-cecbf3eee4c1"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""M"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1828f83-b10e-4c91-9cec-1ccc986bce84"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainBoard
        m_MainBoard = asset.FindActionMap("MainBoard", throwIfNotFound: true);
        m_MainBoard_Space = m_MainBoard.FindAction("Space", throwIfNotFound: true);
        m_MainBoard_A = m_MainBoard.FindAction("A", throwIfNotFound: true);
        m_MainBoard_D = m_MainBoard.FindAction("D", throwIfNotFound: true);
        m_MainBoard_Return = m_MainBoard.FindAction("Return", throwIfNotFound: true);
        m_MainBoard_I = m_MainBoard.FindAction("I", throwIfNotFound: true);
        m_MainBoard_M = m_MainBoard.FindAction("M", throwIfNotFound: true);
        m_MainBoard_Escape = m_MainBoard.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainBoard
    private readonly InputActionMap m_MainBoard;
    private IMainBoardActions m_MainBoardActionsCallbackInterface;
    private readonly InputAction m_MainBoard_Space;
    private readonly InputAction m_MainBoard_A;
    private readonly InputAction m_MainBoard_D;
    private readonly InputAction m_MainBoard_Return;
    private readonly InputAction m_MainBoard_I;
    private readonly InputAction m_MainBoard_M;
    private readonly InputAction m_MainBoard_Escape;
    public struct MainBoardActions
    {
        private @PlayerInputAction m_Wrapper;
        public MainBoardActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Space => m_Wrapper.m_MainBoard_Space;
        public InputAction @A => m_Wrapper.m_MainBoard_A;
        public InputAction @D => m_Wrapper.m_MainBoard_D;
        public InputAction @Return => m_Wrapper.m_MainBoard_Return;
        public InputAction @I => m_Wrapper.m_MainBoard_I;
        public InputAction @M => m_Wrapper.m_MainBoard_M;
        public InputAction @Escape => m_Wrapper.m_MainBoard_Escape;
        public InputActionMap Get() { return m_Wrapper.m_MainBoard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainBoardActions set) { return set.Get(); }
        public void SetCallbacks(IMainBoardActions instance)
        {
            if (m_Wrapper.m_MainBoardActionsCallbackInterface != null)
            {
                @Space.started -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnSpace;
                @Space.performed -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnSpace;
                @Space.canceled -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnSpace;
                @A.started -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnA;
                @D.started -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnD;
                @D.performed -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnD;
                @D.canceled -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnD;
                @Return.started -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnReturn;
                @Return.performed -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnReturn;
                @Return.canceled -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnReturn;
                @I.started -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnI;
                @I.performed -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnI;
                @I.canceled -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnI;
                @M.started -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnM;
                @M.performed -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnM;
                @M.canceled -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnM;
                @Escape.started -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_MainBoardActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_MainBoardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Space.started += instance.OnSpace;
                @Space.performed += instance.OnSpace;
                @Space.canceled += instance.OnSpace;
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @D.started += instance.OnD;
                @D.performed += instance.OnD;
                @D.canceled += instance.OnD;
                @Return.started += instance.OnReturn;
                @Return.performed += instance.OnReturn;
                @Return.canceled += instance.OnReturn;
                @I.started += instance.OnI;
                @I.performed += instance.OnI;
                @I.canceled += instance.OnI;
                @M.started += instance.OnM;
                @M.performed += instance.OnM;
                @M.canceled += instance.OnM;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public MainBoardActions @MainBoard => new MainBoardActions(this);
    public interface IMainBoardActions
    {
        void OnSpace(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
        void OnReturn(InputAction.CallbackContext context);
        void OnI(InputAction.CallbackContext context);
        void OnM(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
