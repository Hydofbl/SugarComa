//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MiniGames/FallingStars/Scripts/Player/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Assets.MiniGames.FallingStars.Scripts.Player
{
    public partial class @PlayerActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerInputs"",
            ""id"": ""76825f63-146b-43a0-b27d-d11ab8973f15"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""11ddaa5b-ea38-45fb-8e6d-120a2a6afe9b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""783e6d1b-60ed-4a5c-b5f9-97ae79f60b23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotationWithGamepad"",
                    ""type"": ""Value"",
                    ""id"": ""32d571c9-8afc-45b8-97bd-302069945cff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseForRotation"",
                    ""type"": ""Button"",
                    ""id"": ""08a6df70-5e25-4c32-99f8-b32f7defb233"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotationWithMouse"",
                    ""type"": ""Value"",
                    ""id"": ""f8e7bc8d-868f-42c5-b69d-05e698b0a24c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d8f7765-1394-4cab-b233-2d9caaf482a5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""926507ba-1f1a-470b-aa38-5367e16c586b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""392298f5-d6ad-4d0e-a762-1514e25b6f19"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1592a8af-7b01-4d17-8f7a-a1b781de8eb4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c2b92b45-084a-4f4f-9a76-de30376be17c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a44b2f6f-8be9-451b-afaf-c4fda72a9042"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e5f63f94-c13a-453a-a521-5072faba04ff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a097da8d-24d4-4dbf-b894-db5576156eb9"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77056ccf-e54d-47c8-bc1c-e3d5c9737e15"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationWithGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1a79160-f794-41a9-8787-be2bd7e870b6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseForRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5702a8b7-9614-49dc-bfc6-aabb4e4fa842"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationWithMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerInputs
            m_PlayerInputs = asset.FindActionMap("PlayerInputs", throwIfNotFound: true);
            m_PlayerInputs_Movement = m_PlayerInputs.FindAction("Movement", throwIfNotFound: true);
            m_PlayerInputs_Punch = m_PlayerInputs.FindAction("Punch", throwIfNotFound: true);
            m_PlayerInputs_RotationWithGamepad = m_PlayerInputs.FindAction("RotationWithGamepad", throwIfNotFound: true);
            m_PlayerInputs_MouseForRotation = m_PlayerInputs.FindAction("MouseForRotation", throwIfNotFound: true);
            m_PlayerInputs_RotationWithMouse = m_PlayerInputs.FindAction("RotationWithMouse", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerInputs
        private readonly InputActionMap m_PlayerInputs;
        private IPlayerInputsActions m_PlayerInputsActionsCallbackInterface;
        private readonly InputAction m_PlayerInputs_Movement;
        private readonly InputAction m_PlayerInputs_Punch;
        private readonly InputAction m_PlayerInputs_RotationWithGamepad;
        private readonly InputAction m_PlayerInputs_MouseForRotation;
        private readonly InputAction m_PlayerInputs_RotationWithMouse;
        public struct PlayerInputsActions
        {
            private @PlayerActions m_Wrapper;
            public PlayerInputsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerInputs_Movement;
            public InputAction @Punch => m_Wrapper.m_PlayerInputs_Punch;
            public InputAction @RotationWithGamepad => m_Wrapper.m_PlayerInputs_RotationWithGamepad;
            public InputAction @MouseForRotation => m_Wrapper.m_PlayerInputs_MouseForRotation;
            public InputAction @RotationWithMouse => m_Wrapper.m_PlayerInputs_RotationWithMouse;
            public InputActionMap Get() { return m_Wrapper.m_PlayerInputs; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerInputsActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerInputsActions instance)
            {
                if (m_Wrapper.m_PlayerInputsActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnMovement;
                    @Punch.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnPunch;
                    @Punch.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnPunch;
                    @Punch.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnPunch;
                    @RotationWithGamepad.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRotationWithGamepad;
                    @RotationWithGamepad.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRotationWithGamepad;
                    @RotationWithGamepad.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRotationWithGamepad;
                    @MouseForRotation.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnMouseForRotation;
                    @MouseForRotation.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnMouseForRotation;
                    @MouseForRotation.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnMouseForRotation;
                    @RotationWithMouse.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRotationWithMouse;
                    @RotationWithMouse.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRotationWithMouse;
                    @RotationWithMouse.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRotationWithMouse;
                }
                m_Wrapper.m_PlayerInputsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Punch.started += instance.OnPunch;
                    @Punch.performed += instance.OnPunch;
                    @Punch.canceled += instance.OnPunch;
                    @RotationWithGamepad.started += instance.OnRotationWithGamepad;
                    @RotationWithGamepad.performed += instance.OnRotationWithGamepad;
                    @RotationWithGamepad.canceled += instance.OnRotationWithGamepad;
                    @MouseForRotation.started += instance.OnMouseForRotation;
                    @MouseForRotation.performed += instance.OnMouseForRotation;
                    @MouseForRotation.canceled += instance.OnMouseForRotation;
                    @RotationWithMouse.started += instance.OnRotationWithMouse;
                    @RotationWithMouse.performed += instance.OnRotationWithMouse;
                    @RotationWithMouse.canceled += instance.OnRotationWithMouse;
                }
            }
        }
        public PlayerInputsActions @PlayerInputs => new PlayerInputsActions(this);
        public interface IPlayerInputsActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnPunch(InputAction.CallbackContext context);
            void OnRotationWithGamepad(InputAction.CallbackContext context);
            void OnMouseForRotation(InputAction.CallbackContext context);
            void OnRotationWithMouse(InputAction.CallbackContext context);
        }
    }
}
